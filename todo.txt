test targeting < at this point this stuff is complicated enough to be an integration test

test appliers
trigger applications:
tile (none => apply immediately modifier to cost, onoccupied => when unit ends turn on it, apply to unit)
unit (none => apply immediately modifier to stats, onhit => when unit is attacked by other, apply to other)
weapon (onattack => when unit attacks other, apply to other)

move all test generation functions out of their modules - it clutters crate visibility

write some response unwrapper, this is so annoying
-> we can get around this if we enforce that ONLY ONE response will ever happen. can we? seems unlikely, but let's brainstorm
unit_0 targets unit_1 and unit_2 others for an attack -> they get destroyed or don't -> unit_0 needs to take supply damage from both
ok so yeah wecan't enforce it, but we can still write an unwrapper
^ alternatively, if we change Observer Response into holding only primitive types, then Handler Response holds the exact one value (or many as a Vec), then no unwrapping (only verifying that it's the correct Response format) < I LIKE THIS!
but it does require a lot of logic being implemented in Handler that it really has no business knowing...
well, it's really just "convert multiple Response into Response (Vec<primitive>) or convert one Response into Response (primitive)"
that shouldn't be too logically distant, no?

grid should store a cache of unit faction membership, because this is likely to be expensive (runs multiple times every turn)

start documenting functions...

encirclements
order-of-battle
integrate
turns

Needs more error checking (for example, if a a fallible function is called, check that it succeeded)
Functions that can fail should return Option or Result

Balancing goals:
When in combat, morale/manpower/equipment drain should always be greater than recovery

Order of initialisation:
Create Game
Game creates Handler, then converts it to an Rc<RefCell>
Game creates all game objects (Grid first; Faction must come before Unit [add members]), then subscribes them to Handler
