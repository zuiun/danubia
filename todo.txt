i'm starting to get concerned with the RefCell abuse, even though i know it's safe

move all test generation functions out of their modules - it clutters crate visibility

write some response unwrapper, this is so annoying
-> we can get around this if we enforce that ONLY ONE response will ever happen. can we? seems unlikely, but let's brainstorm
unit_0 targets unit_1 and unit_2 others for an attack -> unit_0 needs to take supply damage from both
ok so yeah wecan't enforce it, but we can still write an unwrapper
^ alternatively, if we change Observer Response into holding only primitive types, then Handler Response holds the exact one value (or many as a Vec), then no unwrapping (only verifying that it's the correct Response format) < I LIKE THIS!
but it does require a lot of logic being implemented in Handler that it really has no business knowing...
well, it's really just "convert multiple Response into Response (Vec<primitive>) or convert one Response into Response (primitive)"
that shouldn't be too logically distant, no?
^ seems impossible without an insane amount of matching that should really be done by Observer

start documenting functions...

encirclements
order-of-battle
integrate
turns

Needs more error checking (for example, if a a fallible function is called, check that it succeeded)
Functions that can fail should return Option or Result
Go through and remove as many pubs as possible

Balancing goals:
When in combat, morale/manpower/equipment drain should always be greater than recovery

Initialisation:
Create Game
Game creates Handler, then converts it to an Rc<RefCell>
Game creates all game objects, then subscribes them to Handler
register all events, then call initialisation functions
Initialiser registers events (FactionAddMember > GridPlaceUnit), applies passives

Ideas for optimisations:
Several interactions could be limited with a cache:
For example, if a unit is searching for targets, it could request a reference to Grid.tiles and perform the search itself
Unit could cache its own location
