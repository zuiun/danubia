Features:
game loop
rework event system into game events (weather, spawning reinforcements, etc)
logging (sync::mspc seems promising)

Code:
move all test generation functions out of their modules - it clutters crate visibility < last one is generate_scene
start documenting functions...
Needs more error checking (for example, if a a fallible function is called, check that it succeeded)
^ Functions that can fail should return Option or Result (maybe Result<Option>)
^ If I start writing my own error types, I can also take advantage of ?
Go through and remove as many pubs as possible
consistent semantics for &parameters/returns
associated structs/enums should probably have their parent in their names
consider renaming single letter variables (used for deconstruction)
can_stack shouldn't necessarily require a ModifierBuilder

Balancing:
When in combat, morale/manpower/equipment drain should always be greater than recovery

Initialisation:
As far as I can tell, no further initialisation than what is already written is unnecessary, at least until I add saving/loading

Optimisations:
Cache:
- Unit could cache its own location
- All tiles reachable from some tile is cachable if we know all the MOV, but otherwise it takes up a huge amount of space
  ^ an alternate solution is multithreading: calculate the reachable tiles for units that move later than the current one while waiting for I/O
  ^ this also works for targeting
- Choosing targets for Path uses a double search, which could be cached?
