Features:
display Grid
rework event system into game events (weather, spawning reinforcements, etc)
^ unit death is best handled by events, but I can't think of a good architecture for it:
- Implement Observer for Game, with all the disgusting RefCell that would entail
- Give Handler an Rc<RefCell> to Game, which has a more tolerable RefCell situation
- Handler owns Game (I dislike this)
what needs to be saved? unit location, occupations, unit stats, unit modifiers/attributes, location modifiers/attributes, weapon attributes,

Code:
Make something other than update () handle key input < repurpose Validator and Reader
Split apart update ()
More standardised state transitions (presumably using Transformer)
generate_scene clutters crate visibility; lists should honestly not be part of lib
start documenting functions...
Go through and remove as many pubs as possible
consistent semantics for &parameters/returns
associated structs/enums should probably have their parent in their names
consider renaming single letter variables (used for deconstruction)
some panics should be marked unreachable
find_locations_* and find_units_* has a lot of duplicated logic, but they may be too different to forcibly marry? it would be bad OOP probably
extract_if recently got stabilised, whenever 1.85 gets released I should use it to replace this awful next_id and such filtering

Balancing:
When in combat, morale/manpower/equipment drain should always be greater than recovery
^ we now face the problem where there is potentially nowhere near enough recovery
^ supply drain in particular is way too fast

Initialisation:
As far as I can tell, no further initialisation is necessary, at least until I add saving/loading

Optimisations:
Cache:
- Unit could cache its own location
- All tiles reachable from some tile is cachable if we know all the MOV, but otherwise it takes up a huge amount of space
  ^ an alternate solution is multithreading: calculate the reachable tiles for units that move later than the current one while waiting for I/O
  ^ this also works for targeting
- Choosing targets for Path uses a double search, which could be cached?
Many of my Vecs are fixed-size and I already know what size they should be (reserve? with_capacity?)
